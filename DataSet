import os
from torch.utils.data import Dataset
from torchvision.io import read_image
import torchvision

#dichiaro la classe per il dataset Food-101
class Food101Dataset(Dataset):
    def __init__(self, root, split="train",transform=None, target_transform=None):

        #get the path to the folder contained in the split variable, in this case pre-posted in train
        split_path = os.path.join(root, "meta", f"{split}.txt")
        with open(split_path) as f:
            self.rel_paths = [ln.strip() for ln in f] #get a list containing the path to each image taken in the text file as: waffles/452670 

        #get the path to the classes folder, containing all the classes prensent in the database.
        class_file = os.path.join(root, "meta", "classes.txt")
        with open(class_file) as f:
            classes = [c.strip() for c in f] # I get a list containing class names for example: waffles
        self.class_to_idx = {c: i for i, c in enumerate(classes)} #create a numbered dictionary for classes.

        #get the path to the images folder containing precisely the images
        self.img_root = os.path.join(root, "images")

        self.transform = transform
        self.target_transform = target_transform

        #get the length of the list containing the image paths in the train or test file.
    def __len__(self):
        return len(self.rel_paths)
        #function that allows me to actually get the image from the database.
    def __getitem__(self, idx):
        rel_path = self.rel_paths[idx] #rel_path gets one at a time a list item containing the paths to the individual images
        rel_path_jpg = rel_path + ".jpg"
        img_path = os.path.join(self.img_root, rel_path_jpg) #concatenate paths so that we have the final image path.
        img_path = os.path.normpath(img_path) #normalize path to \ and not to /

        image = read_image(img_path) #leggo l'immagine

        # label = folder name (first part of path) â†’ index
        class_name = rel_path.split('/')[0] #take class name, waffles/452670, take waffles
        label = self.class_to_idx[class_name] #extract simply the class index, to communicate it to the model, that way it will know that that image belongs to that particular class.

        # ---------- transforms ----------
        if self.transform is not None:
            image = self.transform(image)  # C,H,W float32 normalized
        if self.target_transform is not None:
               label = self.target_transform(label)

        return image, label

#declare class for SVHN dataset which is already fortunately handled by pytorch
class SVHNDataset(Dataset):
    def __init__(self, root, split="train", transform=None):
      #SVHN is a standard database and torchvision gives us everything we need to manage it, let's not reinvent the ruora and use it :)
        self.dataset = torchvision.datasets.SVHN(
            root=root,
            split=split,
            download=True,
            transform=transform
        )
    def __len__(self):
        return len(self.dataset)

    def __getitem__(self, idx):
        image, label = self.dataset[idx] #get the image and label from the dataset.
        return image, -1, label 

